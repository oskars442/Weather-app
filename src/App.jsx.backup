import { useState, useEffect } from 'react';
import SearchBar from './components/SearchBar';
import CurrentCard from './components/CurrentCard';
import DailyForecast from './components/DailyForecast';
import HourlyStrip from './components/HourlyStrip';
import UnitToggle from './components/UnitToggle';
import { useLocalStorage } from './hooks/useLocalStorage';
import { getWeatherForecast, getCurrentLocation } from './utils/api';
import { getWeatherInfo } from './utils/weatherCodes';

// Default city (Riga, Latvia)
const DEFAULT_CITY = {
  name: 'Rīga',
  latitude: 56.9496,
  longitude: 24.1052,
  country: 'Latvia',
  admin1: 'Rīga'
};

// Popular Latvian cities for quick access
const QUICK_PICKS = [
  { name: 'Rīga', latitude: 56.9496, longitude: 24.1052 },
  { name: 'Liepāja', latitude: 56.5053, longitude: 21.0107 },
  { name: 'Ventspils', latitude: 57.3894, longitude: 21.5644 },
  { name: 'Jelgava', latitude: 56.6500, longitude: 23.7294 },
  { name: 'Jūrmala', latitude: 56.9681, longitude: 23.7794 },
];

function App() {
  const [weather, setWeather] = useState(null);
  const [currentCity, setCurrentCity] = useLocalStorage('weather-city', DEFAULT_CITY);
  const [unit, setUnit] = useLocalStorage('weather-unit', 'C');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [backgroundClass, setBackgroundClass] = useState('bg-clear');

  // Load weather data
  const loadWeatherData = async (city) => {
    setLoading(true);
    setError(null);
    
    try {
      const weatherData = await getWeatherForecast(city.latitude, city.longitude);
      setWeather(weatherData);
      setCurrentCity(city);
      
      // Update background based on current weather
      if (weatherData.current_weather) {
        const weatherInfo = getWeatherInfo(weatherData.current_weather.weathercode);
        const hour = new Date().getHours();
        const isNight = hour < 6 || hour > 20;
        
        if (isNight) {
          setBackgroundClass('bg-night');
        } else {
          setBackgroundClass(`bg-${weatherInfo.group}`);
        }
      }
    } catch (err) {
      setError(err.message);
      console.error('Weather loading error:', err);
    } finally {
      setLoading(false);
    }
  };

  // Try to get user's location on first load
  useEffect(() => {
    const initializeApp = async () => {
      try {
        // Try to get user's current location
        const location = await getCurrentLocation();
        
        // Check if user is in Latvia (approximate bounds)
        const isInLatvia = 
          location.latitude >= 55.5 && location.latitude <= 58.1 &&
          location.longitude >= 20.5 && location.longitude <= 28.3;
        
        if (isInLatvia) {
          // Use current location if in Latvia
          await loadWeatherData({
            name: 'Jūsu atrašanās vieta',
            latitude: location.latitude,
            longitude: location.longitude
          });
        } else {
          // Use saved city or default to Riga
          await loadWeatherData(currentCity);
        }
      } catch (err) {
        // Fallback to saved city or Riga
        await loadWeatherData(currentCity);
      }
    };

    initializeApp();
  }, []);

  const handleCitySelect = (city) => {
    loadWeatherData(city);
  };

  const handleQuickPick = (city) => {
    loadWeatherData(city);
  };

  const handleRetry = () => {
    loadWeatherData(currentCity);
  };
return (
  <div>
    {/* UPDATED TEST - Should turn BLUE when fixed */}
    <div className="test-red bg-blue-500 p-8 m-4 text-white font-bold text-xl">
      🔍 DIAGNOSTIC TEST: If BLUE = Tailwind is now working! If RED = Still not working
    </div>
    
    {/* Your existing app code below */}
    <div className={`min-h-screen transition-all duration-1000 ${backgroundClass}`}>
      {/* rest of your existing code... */}
    </div>
  </div>
);
  return (
    
    <div className={`min-h-screen transition-all duration-1000 ${backgroundClass}`}>
      <div className="container mx-auto px-4 py-8 max-w-5xl">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-2">
            🌤️ Latvijas Laika Prognoze
          </h1>
          <p className="text-white/80">
            Precīza laika prognoze visām Latvijas pilsētām
          </p>
        </div>

        {/* Search Bar */}
        <div className="mb-8">
          <SearchBar 
            onCitySelect={handleCitySelect} 
            currentCity={currentCity}
          />
        </div>

        {/* Quick Picks */}
        <div className="mb-8">
          <div className="flex flex-wrap justify-center gap-2">
            {QUICK_PICKS.map((city) => (
              <button
                key={city.name}
                onClick={() => handleQuickPick(city)}
                className={`glass-button px-4 py-2 text-white text-sm font-medium ${
                  currentCity?.name === city.name ? 'bg-white/30' : ''
                }`}
              >
                {city.name}
              </button>
            ))}
          </div>
        </div>

        {/* Unit Toggle */}
        <div className="mb-8">
          <UnitToggle unit={unit} onUnitChange={setUnit} />
        </div>

        {/* Loading State */}
        {loading && (
          <div className="flex justify-center items-center py-20">
            <div className="glass-card p-8 text-center">
              <div className="animate-spin w-12 h-12 border-4 border-white/30 border-t-white rounded-full mx-auto mb-4"></div>
              <p className="text-white text-lg">Ielādē laika apstākļus...</p>
            </div>
          </div>
        )}

        {/* Error State */}
        {error && !loading && (
          <div className="flex justify-center items-center py-20">
            <div className="glass-card p-8 text-center max-w-md">
              <div className="text-6xl mb-4">⚠️</div>
              <h3 className="text-white text-xl font-bold mb-2">Kļūda</h3>
              <p className="text-white/80 mb-4">{error}</p>
              <button
                onClick={handleRetry}
                className="glass-button px-6 py-3 text-white font-medium"
              >
                Mēģināt vēlreiz
              </button>
            </div>
          </div>
        )}

        {/* Weather Content */}
        {weather && !loading && !error && (
          <div className="space-y-8">
            {/* Current Weather */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              <div className="lg:col-span-1">
                <CurrentCard 
                  weather={weather.current_weather} 
                  city={currentCity}
                  unit={unit}
                />
              </div>
              
              {/* Daily Forecast */}
              <div className="lg:col-span-2">
                <DailyForecast 
                  daily={weather.daily}
                  unit={unit}
                />
              </div>
            </div>

            {/* Hourly Forecast */}
            <HourlyStrip 
              hourly={weather.hourly}
              unit={unit}
            />
          </div>
        )}

        {/* Footer */}
        <footer className="mt-16 text-center text-white/60 text-sm">
          <p>
            Dati no{' '}
            <a 
              href="https://open-meteo.com/" 
              target="_blank" 
              rel="noopener noreferrer"
              className="text-white/80 hover:text-white transition-colors"
            >
              Open-Meteo
            </a>
            {' '}• Izstrādāts ar ❤️ Latvijai
          </p>
        </footer>
      </div>
    </div>
  );
}

export default App;